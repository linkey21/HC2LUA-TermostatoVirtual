{"name":"TermostatoVirtual","type":"virtual_device","properties":{"deviceIcon":1067,"currentIcon":"1066","log":"","logTemp":"","mainLoop":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nlocal iconON = 1067\nlocal iconOFF = 1066\nlocal offSetSonda = -1.9  -- ajuste de la sonda con la temperatura real\nlocal thingspeakKey = ''\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal mode = {}; mode[0]='OFF'; mode[1]='AUTO'; mode[2]='MANUAL'\nif not oN then oN = true end\nif not timestampPID then timestampPID = os.time() end\nOFF=1;INFO=2;DEBUG=3                -- referencia para el log\nnivelLog = INFO                    -- nivel de log\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\nif not toolKit then toolKit = {\n  __version = \"1.0.0\",\n  -- log(level, log)\n  -- (global) level: nivel de LOG\n  -- (string) mensaje: mensaje\n  log = (function(self, level, mensaje, ...)\n    if not mensaje then mensaje = 'nil' end\n    if nivelLog >= level then\n      local color = 'yellow'\n      if level == INFO then color = 'green' end\n      fibaro:debug(string.format(\n      '<%s style=\"color:%s;\">%s</%s>', \"span\", color, mensaje, \"span\")\n      )\n    end\n  end)\n} end\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[resetDevice(nodeId)\n    (number) nodeId: n칰mero del dispositivo a almacenar en la variable global\ncrea una varaible global para almacenar la tabla que representa el\ndispositivo y lo inicializa. --]]\nfunction resetDevice(nodeId)\n  -- si no exite la variable global\n  if not isVariable('dev'..nodeId) then\n    -- intentar crear la variableGlobal\n    local json = '{\"name\":\"'..'dev'..nodeId..'\", \"isEnum\":0}'\n    if not HC2 then HC2 = Net.FHttp(\"127.0.0.1\", 11111) end\n    HC2:POST(\"/api/globalVariables\", json)\n    fibaro:sleep(1000)\n    -- comprobar que se ha creado la variableGlobal\n    if not isVariable('dev'..nodeId) then\n      toolKit:log(DEBUG, 'No se pudo declarar variable global '..'dev'..nodeId)\n      fibaro:abort()\n    end\n  end\n  -- crear tabla vac칤a para dispositivo\n  local termostatoVirtual = {nodeId = nodeId, panelId = 0, probeId = 0,\n  targetLevel = 0, value = 0, mode = 1, timestamp = os.time(), oN=false}\n  -- guardar la tabla en la variable global\n  fibaro:setGlobal('dev'..nodeId, json.encode(termostatoVirtual))\n  return termostatoVirtual\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n칰mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      toolKit:log(DEBUG, 'nodeId: '..device.nodeId)\n      return device\n     end\n  end\n  -- en cualquier otro caso iniciarlo y devolverlo\n  return resetDevice(nodeId)\nend\n\n--[[getPanel(roomId)\n    (number) nodeId: n칰mero del dispositivo a almacenar en la variable global\n  devuelve el panel de calefacci칩n que controla la habitaci칩n donde se encuentra\n  el disposito virtual con identificador nodeId --]]\nfunction getPanel(roomId)\n  toolKit:log(DEBUG, 'roomId: '..roomId)\n  -- obtener paneles de temperatura\n  if not HC2 then HC2 = Net.FHttp(\"127.0.0.1\", 11111) end\n  response ,status, errorCode = HC2:GET(\"/api/panels/heating\")\n  -- recorrer la tabla de paneles y buscar si alguno controla esta habitaci칩n\n  local panels = json.decode(response)\n  for pKey, pValue in pairs(panels) do\n    toolKit:log(DEBUG, 'Panel: '..pValue.id)\n    -- obtener panel\n    if not HC2 then HC2 = Net.FHttp(\"127.0.0.1\", 11111) end\n    response ,status, errorCode = HC2:GET(\"/api/panels/heating/\"..pValue.id)\n    local panel = json.decode(response)\n    local rooms = panel['properties'].rooms\n    -- recorrer las habitaciones de cada panel\n    for rKey, rValue in pairs(rooms) do\n      toolKit:log(DEBUG, 'Room: '..rValue)\n      if rValue == roomId then return panel end\n    end\n  end\n  return false\nend\n\n--[[getTargetLevel(panel)\n    (table) panel: tabla que representa un panel de temperatura\n  devuelve la temperatura de consigna desde panel indicado\n--]]\nfunction getTargetLevel(panel)\n  -- obtener propiedades del panel\n  local properties = panel.properties\n\n  -- si vacationTemperature ~= 0 devolver \"vacationTemperature\"\n  if properties.vacationTemperature ~= 0 then\n    return properties.vacationTemperature\n  end\n\n  -- si handTimestamp >= os.time() devolver \"handTemperature\"\n  if properties.handTimestamp >= os.time() then\n    return properties.handTemperature\n  end\n\n  -- en otro caso devolver \"temperature\"\n  -- obtener dia de la semana de hoy\n  local dow = string.lower(tostring(os.date('%A')))\n  toolKit:log(DEBUG, 'Hoy es: '..dow)\n  -- obtener la tabla con propiedades del d칤a de la semana\n  local todayTab = properties[dow]\n\n  -- obtenr d칤a de la semana de fue ayer\n  dow = string.lower(tostring(os.date('%A', os.time() - 24*60*60 )))\n  toolKit:log(DEBUG, 'Ayer fue: '..dow)\n  -- obtener tabla con propiedades de ayer\n  local yesterdayTab = properties[dow]\n  -- obtener la temperatura de la noche de ayer para poder usarla como posible\n  -- temperatura, si la hora actual es anteriror a la de la ma침ana del panel,\n  -- hay que tomar la de la noche del d칤a anteriror.\n  local temperatura = yesterdayTab['night'].temperature\n  toolKit:log(DEBUG, 'Temperatura ayer noche: '..temperatura)\n\n  -- las partes en las que divide el d칤a el panel\n  local states = {'morning', 'day', 'evening', 'night'}\n  local year, month, day = os.date('%Y'), os.date('%m'), os.date('%d')\n  toolKit:log(DEBUG, os.time())\n  -- inicialmete tomar como temperatura la 칰ltima temperatura del d칤a anteriror.\n  -- recorrer los diferentes partes en las que divide el d칤a en panel y comparar\n  -- el timestamp de cada una de ellas con el timestamp actual, si el actual es\n  -- mayor o igual se va tomando la temperatura de esa parte.\n  for key, value in pairs(states) do\n    local hour = todayTab[value].hour\n    local min = todayTab[value].minute\n    toolKit:log(DEBUG, hour..':'..min)\n    local timestamp =\n     os.time{year = year, month = month, day = day, hour = hour, min = min}\n    toolKit:log(DEBUG, timestamp)\n    if os.time() >= timestamp then\n      temperatura = todayTab[value].temperature\n    else\n      break\n    end\n  end\n  -- devolver la temperatura que corresponde en el panel en este momento\n  return temperatura\nend\n\n--[[setActuador(termostatoVirtual, actuatorId, actuador)\n  --]]\nfunction setActuador(actuatorId, actuador)\n  -- si el actuador no est치 en modo mantenimiento\n  if actuatorId and actuatorId ~= 0 then\n    -- comprobar estado actual\n    local actuatorState = fibaro:getValue(actuatorId, 'value')\n    -- si hay que encender y esta apagado\n    if actuador and actuatorState == '0' then\n      -- encender\n      fibaro:call(actuatorId, 'turnOn')\n    end\n    -- si hay que apagar y est치 encendido\n    if not actuador and actuatorState == '1' then\n      fibaro:call(actuatorId, 'turnOff')\n    end\n  end\nend\n\n--[[--------- BUCLE PRINCIPAL ------------------------------------------------]]\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\ntoolKit:log(DEBUG, 'termostatoVirtual: '..json.encode(termostatoVirtual))\n\n-- actualizar etiqueta identificador\nfibaro:call(_selfId, \"setProperty\", \"ui.labelId.value\", _selfId)\n\n--[[Panel]]\n-- obtener el panel\nlocal panel = getPanel(fibaro:getRoomID(_selfId))\nif panel then\n  toolKit:log(DEBUG, 'Nombre panel: '..panel.name)\n  -- actualizar dispositivo\n  termostatoVirtual.panelId = panel.id\n  fibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\nend\n\n--[[temperarura actual]]\n-- si hay sonda declarada obtener la temperatura\nif termostatoVirtual.probeId and termostatoVirtual.probeId ~= 0 then\n  local value = tonumber(fibaro:getValue(termostatoVirtual.probeId, 'value'))\n  -- offSet de la sonda\n  value = value + offSetSonda\n  -- actualizar dispositivo\n  termostatoVirtual.value = value\n  fibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\nend\n\n--[[temperarura de consigna]]\n-- comparar timestamp con os.time() y comprobar mode\nif (termostatoVirtual.timestamp < os.time()) and termostatoVirtual.mode ~= 0\n then\n  -- si es menor y status no es OFF, tomar temperatura del panel\n  local targetLevel = getTargetLevel(panel)\n  toolKit:log(DEBUG, 'Temperatura consigna: '..targetLevel..'췈C')\n  -- si la \"targetLevel\" es distinto de 0 actualizar temperarura de consigna\n  if targetLevel > 0 then\n    -- actualizar dispositivo\n    termostatoVirtual.targetLevel = targetLevel\n    fibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n  end\nend\n\n-- actualizar icono y etiquetas\nlocal onOff = ' _'\nlocal icono = iconOFF\nlocal targetLevel = tonumber(termostatoVirtual.targetLevel)\nlocal value = tonumber(termostatoVirtual.value)\nif termostatoVirtual.oN then\n  onOff = ' 游댠'\n  icono = iconON\nend\ntargetLevel = string.format('%.2f', targetLevel)\nvalue = string.format('%.2f', value)\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n value..'췈C / '..targetLevel..'췈C'..onOff)\n-- actualizar icono\nfibaro:call(_selfId, 'setProperty', \"currentIcon\", icono)\n\n--[[tiempo de protecci칩n]]\n-- si el modo es no es OFF\nif termostatoVirtual.mode ~= 0 then\n  local shadowTime = termostatoVirtual.timestamp - os.time()\n  if shadowTime <= 0 then\n    shadowTime = 0\n    -- actualizar estado del dispositivo\n    termostatoVirtual.mode = 1\n  else\n    shadowTime = shadowTime / 60\n    -- actualizar estado del dispositivo\n    termostatoVirtual.mode = 2\n  end\n  -- actualizar dispositivo\n  fibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n  -- actualizar etiqueda de modo de funcionamiento \"mode\"\"\n  toolKit:log(DEBUG, 'Modo: '..mode[termostatoVirtual.mode])\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\",\n   mode[termostatoVirtual.mode])\n   -- actualizar etiqueta de tiempo\n  local minText = {}; local timeLabel = '06h 00m'\n  minText[0]   = '00h 00m'; minText[15]  = '00h 15m'; minText[30]  = '00h 30m'\n  minText[45]  = '00h 45m'; minText[60]  = '01h 00m'; minText[75]  = '01h 15m'\n  minText[90]  = '01h 30m'; minText[105] = '01h 45m'; minText[120] = '02h 00m'\n  minText[135] = '02h 15m'; minText[150] = '02h 30m'; minText[165] = '02h 45m'\n  minText[180] = '03h 00m'; minText[195] = '03h 15m'; minText[210] = '03h 30m'\n  minText[225] = '03h 45m'; minText[240] = '04h 00m'; minText[255] = '04h 15m'\n  minText[270] = '04h 30m'; minText[285] = '04h 45m'; minText[300] = '05h 00m'\n  minText[315] = '05h 15m'; minText[330] = '05h 30m'; minText[345] = '05h 45m'\n  minText[360] = '06h 00m'\n  for value = 360, 0, -15 do\n    if shadowTime <= value then\n      timeLabel = minText[value]\n    else\n      break\n    end\n  end\n  -- actualizar etiqueta de tiempo\n  fibaro:call(_selfId, \"setProperty\", \"ui.timeLabel.value\", timeLabel)\nend\n\n--[[c치lculo PID]]\n-- actualizar solo si el PID cambia\nif termostatoVirtual.PID and termostatoVirtual.PID['timestamp'] ~= timestampPID\n then\n  local PID = termostatoVirtual.PID\n  toolKit:log(DEBUG, json.encode(termostatoVirtual.PID))\n  timestampPID = termostatoVirtual.PID['timestamp']\n  if not thingspeak then\n    thingspeak = Net.FHttp(\"api.thingspeak.com\")\n  end\n  local payload = \"key=\"..thingspeakKey..\"&field1=\"..PID.newErr..\n  \"&field2=\"..PID.proporcional..\"&field3=\"..PID.integral..\n  \"&field4=\"..PID.derivativo..\"&field5=\"..PID.result\n  local response, status, errorCode = thingspeak:POST('/update', payload)\nend\n\n--[[encendido / apagado]]\n-- actualizar solo si el dispositivo cambia de estado\nif termostatoVirtual.oN ~= on then\n  if termostatoVirtual.oN then\n    -- informar\n    toolKit:log(INFO, 'ON')\n    -- actuar sobre el actuador si es preciso\n    setActuador(termostatoVirtual.actuatorId, true)\n    on = true\n  else\n    -- informar\n    toolKit:log(INFO, 'OFF')\n    -- actuar sobre el actuador si es preciso\n    setActuador(termostatoVirtual.actuatorId, false)\n    on = false\n  end\nend\nfibaro:sleep(1000)\n--游꺁 游댢  游댠  游댖\n","ui.actualConsigna.value":"20.50췈C / 20.50췈C _","ui.actuatorLabel.value":"414-Lamparita","ui.labelId.value":"587","ui.modeLabel.value":"AUTO","ui.probeLabel.value":"389-AtmoMad Temp.Int.","ui.timeLabel.value":"00h 00m","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"","name":"actualConsigna","favourite":false,"main":true}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"","name":"timeLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":3,"lua":true,"waitForResponse":false,"caption":"- 췈C","name":"downTempButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal intervalo = 0.1\nlocal maxTemp = 28\nlocal shadowTime = 120 -- minutos en intervalos de 15min.\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n-- recuperar temperaturas\nlocal value = termostatoVirtual.value\nlocal targetLevel = termostatoVirtual.targetLevel\nlocal onOff = ' _'\n-- disminuir intervalo\nif targetLevel >= intervalo then\n  targetLevel = targetLevel - intervalo\nelse\n  targetLevel = maxTemp\nend\n\n--actualizar dispositivo\ntermostatoVirtual.targetLevel = targetLevel\n-- proteger con un tiempo por defecto\ntermostatoVirtual.timestamp = os.time() + shadowTime * 60\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n\n-- actualizar la etiqueta\ntargetLevel = string.format('%.2f', targetLevel)\nvalue = string.format('%.2f', value)\nlocal onOff = ' _'\nfibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n value..'췈C / '..targetLevel..'췈C'..onOff)\n\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":true},{"id":4,"lua":true,"waitForResponse":false,"caption":"+  췈C","name":"upTempButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tupTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal intervalo = 0.1\nlocal maxTemp = 28\nlocal shadowTime = 120 -- minutos en intervalos de 15min.\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n-- recuperar temperaturas\nlocal value = termostatoVirtual.value\nlocal targetLevel = termostatoVirtual.targetLevel\nlocal onOff = ' _'\n-- disminuir intervalo\nif targetLevel <= (maxTemp - intervalo) then\n  targetLevel = targetLevel + intervalo\nelse\n  targetLevel = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.targetLevel = targetLevel\n-- proteger con un tiempo por defecto\ntermostatoVirtual.timestamp = os.time() + shadowTime * 60\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n\n-- actualizar la etiqueta\ntargetLevel = string.format('%.2f', targetLevel)\nvalue = string.format('%.2f', value)\nlocal onOff = ' _'\nfibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n value..'췈C / '..targetLevel..'췈C'..onOff)\n\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"游꺁","name":"ecoButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tecoButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal mode = {}; mode[0]='OFF'; mode[1]='AUTO'; mode[2]='MANUAL'\nlocal ecoTemperature = 18 -- 췈C\nlocal shadowTime = 360\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n\n--actualizar dispositivo\ntermostatoVirtual.timestamp = os.time() + shadowTime * 60\ntermostatoVirtual.targetLevel = ecoTemperature\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n-- actualizar etiqueda de modo de funcionamiento \"mode\"\"\n--fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\", mode[termostatoVirtual.mode])\n","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"On/Off","name":"onOffButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tonOffButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal mode = {}; mode[0]='OFF'; mode[1]='AUTO'; mode[2]='MANUAL'\nlocal offTemperature = 5 -- 췈C\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n\n-- --actualizar dispositivo\nif termostatoVirtual.mode == 0 then\n\ttermostatoVirtual.mode = 1\n  termostatoVirtual.timestamp = os.time()\nelse\n\ttermostatoVirtual.mode = 0\n\ttermostatoVirtual.targetLevel = offTemperature\nend\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n-- actualizar etiqueda de modo de funcionamiento \"mode\"\"\nfibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\",\n mode[termostatoVirtual.mode])\n\nfibaro:debug(mode[termostatoVirtual.mode])\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":7,"lua":true,"waitForResponse":false,"caption":"-- 췈C","name":"downDownTempButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal intervalo = 0.5\nlocal maxTemp = 28\nlocal shadowTime = 120 -- minutos en intervalos de 15min.\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n-- recuperar temperaturas\nlocal value = termostatoVirtual.value\nlocal targetLevel = termostatoVirtual.targetLevel\nlocal onOff = ' _'\n-- disminuir intervalo\nif targetLevel >= intervalo then\n  targetLevel = targetLevel - intervalo\nelse\n  targetLevel = maxTemp\nend\n\n--actualizar dispositivo\ntermostatoVirtual.targetLevel = targetLevel\n-- proteger con un tiempo por defecto\ntermostatoVirtual.timestamp = os.time() + shadowTime * 60\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n\n-- actualizar la etiqueta\ntargetLevel = string.format('%.2f', targetLevel)\nvalue = string.format('%.2f', value)\nlocal onOff = ' _'\nfibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n value..'췈C / '..targetLevel..'췈C'..onOff)\n\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":8,"lua":true,"waitForResponse":false,"caption":"++ 췈C","name":"Button32","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tupTempButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\nlocal intervalo = 0.5\nlocal maxTemp = 28\nlocal shadowTime = 120 -- minutos en intervalos de 15min.\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n-- recuperar temperaturas\nlocal value = termostatoVirtual.value\nlocal targetLevel = termostatoVirtual.targetLevel\nlocal onOff = ' _'\n-- disminuir intervalo\nif targetLevel <= (maxTemp - intervalo) then\n  targetLevel = targetLevel + intervalo\nelse\n  targetLevel = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.targetLevel = targetLevel\n-- proteger con un tiempo por defecto\ntermostatoVirtual.timestamp = os.time() + shadowTime * 60\n-- guardar en variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n\n-- actualizar la etiqueta\ntargetLevel = string.format('%.2f', targetLevel)\nvalue = string.format('%.2f', value)\nlocal onOff = ' _'\nfibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n value..'췈C / '..targetLevel..'췈C'..onOff)\n\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"- min","name":"downTimeButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownTimeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nlocal textMin = {}\ntextMin['00h 00m']   = 0; textMin['00h 15m']  = 15; textMin['00h 30m']  = 30\ntextMin['00h 45m']  = 45; textMin['01h 00m']  = 60; textMin['01h 15m']  = 75\ntextMin['01h 30m']  = 90; textMin['01h 45m'] = 105; textMin['02h 00m'] = 120\ntextMin['02h 15m'] = 135; textMin['02h 30m'] = 150; textMin['02h 45m'] = 165\ntextMin['03h 00m'] = 180; textMin['03h 15m'] = 195; textMin['03h 30m'] = 210\ntextMin['03h 45m'] = 225; textMin['04h 00m'] = 240; textMin['04h 15m'] = 255\ntextMin['04h 30m'] = 270; textMin['04h 45m'] = 285; textMin['05h 00m'] = 300\ntextMin['05h 15m'] = 315; textMin['05h 30m'] = 330; textMin['05h 45m'] = 345\ntextMin['06h 00m'] = 360\nlocal minText = {}\nminText[0]   = '00h 00m'; minText[15]  = '00h 15m'; minText[30]  = '00h 30m'\nminText[45]  = '00h 45m'; minText[60]  = '01h 00m'; minText[75]  = '01h 15m'\nminText[90]  = '01h 30m'; minText[105] = '01h 45m'; minText[120] = '02h 00m'\nminText[135] = '02h 15m'; minText[150] = '02h 30m'; minText[165] = '02h 45m'\nminText[180] = '03h 00m'; minText[195] = '03h 15m'; minText[210] = '03h 30m'\nminText[225] = '03h 45m'; minText[240] = '04h 00m'; minText[255] = '04h 15m'\nminText[270] = '04h 30m'; minText[285] = '04h 45m'; minText[300] = '05h 00m'\nminText[315] = '05h 15m'; minText[330] = '05h 30m'; minText[345] = '05h 45m'\nminText[360] = '06h 00m'\n\n-- recuperar etiqueta de tiempo\nlocal time = textMin[fibaro:get(_selfId, 'ui.timeLabel.value')]\n-- disminuir 15min\nif time > 0 then time = time - 15 else time = 360 end\n\n-- actualizar la etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.timeLabel.value\", minText[time])\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n--actualizar dispositivo\ntermostatoVirtual.timestamp = os.time() + time * 60\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"+ min","name":"upTimeButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tupTimeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nlocal textMin = {}\ntextMin['00h 00m']   = 0; textMin['00h 15m']  = 15; textMin['00h 30m']  = 30\ntextMin['00h 45m']  = 45; textMin['01h 00m']  = 60; textMin['01h 15m']  = 75\ntextMin['01h 30m']  = 90; textMin['01h 45m'] = 105; textMin['02h 00m'] = 120\ntextMin['02h 15m'] = 135; textMin['02h 30m'] = 150; textMin['02h 45m'] = 165\ntextMin['03h 00m'] = 180; textMin['03h 15m'] = 195; textMin['03h 30m'] = 210\ntextMin['03h 45m'] = 225; textMin['04h 00m'] = 240; textMin['04h 15m'] = 255\ntextMin['04h 30m'] = 270; textMin['04h 45m'] = 285; textMin['05h 00m'] = 300\ntextMin['05h 15m'] = 315; textMin['05h 30m'] = 330; textMin['05h 45m'] = 345\ntextMin['06h 00m'] = 360\nlocal minText = {}\nminText[0]   = '00h 00m'; minText[15]  = '00h 15m'; minText[30]  = '00h 30m'\nminText[45]  = '00h 45m'; minText[60]  = '01h 00m'; minText[75]  = '01h 15m'\nminText[90]  = '01h 30m'; minText[105] = '01h 45m'; minText[120] = '02h 00m'\nminText[135] = '02h 15m'; minText[150] = '02h 30m'; minText[165] = '02h 45m'\nminText[180] = '03h 00m'; minText[195] = '03h 15m'; minText[210] = '03h 30m'\nminText[225] = '03h 45m'; minText[240] = '04h 00m'; minText[255] = '04h 15m'\nminText[270] = '04h 30m'; minText[285] = '04h 45m'; minText[300] = '05h 00m'\nminText[315] = '05h 15m'; minText[330] = '05h 30m'; minText[345] = '05h 45m'\nminText[360] = '06h 00m'\n\n-- recuperar etiqueta de tiempo\nlocal time = textMin[fibaro:get(_selfId, 'ui.timeLabel.value')]\n-- aumentar 15min\nif time < 360 then time = time + 15 else time = 0 end\n\n-- actualizar la etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.timeLabel.value\", minText[time])\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n--actualizar dispositivo\ntermostatoVirtual.timestamp = os.time() + time * 60\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":11,"lua":false,"waitForResponse":false,"caption":"","name":"modeLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"Sonda:","name":"probeLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":13,"lua":false,"waitForResponse":false,"caption":"Actuador:","name":"actuatorLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":14,"lua":true,"waitForResponse":false,"caption":"Sonda","name":"probeButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tprobeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores de temperatura\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal temperatureSensors = {}\nfor key, value in pairs(devices) do\n  -- para la habitaci칩n fibaro:getRoomID(_selfId)\n  -- todos los \"type\":\"com.fibaro.temperatureSensor\",\n  if value[\"type\"] == \"com.fibaro.temperatureSensor\" then\n    local temperatureSensor = {id = value.id, name = value.name}\n    table.insert(temperatureSensors, temperatureSensor)\n  end\nend\n\n-- seleccionar el siguiete sensor que corresponda\ntemperatureSensor = fibaro:get(_selfId, 'ui.probeLabel.value')\nlocal myKey = 1\nfor key, value in pairs(temperatureSensors) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == temperatureSensor then\n    fibaro:debug(temperatureSensor)\n    if key < #temperatureSensors then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #temperatureSensors\n  end\nend\n\n-- actualizar la etiqueta de sonda\nfibaro:call(_selfId, \"setProperty\", \"ui.probeLabel.value\",\n temperatureSensors[myKey].id..'-'..temperatureSensors[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n--actualizar dispositivo\ntermostatoVirtual.probeId = temperatureSensors[myKey].id\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":15,"lua":true,"waitForResponse":false,"caption":"Actuador","name":"actuatorButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tactuatorButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores interruptores / actuadores\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal binarySwitches = {}\ntable.insert(binarySwitches, {id = 0, name = '游댢'})\nfor key, value in pairs(devices) do\n  -- para la habitaci칩n fibaro:getRoomID(_selfId)\n  -- todos los \"type\":\"com.fibaro.binarySwitch\",\n  if value[\"type\"] == \"com.fibaro.binarySwitch\" or\n     value[\"type\"] == \"com.fibaro.operatingModeHorstmann\" then\n    local binarySwitch = {id = value.id, name = value.name}\n    table.insert(binarySwitches, binarySwitch)\n  end\nend\n\n-- seleccionar el siguiete sensor que corresponda\nbinarySwitch = fibaro:get(_selfId, 'ui.actuatorLabel.value')\nlocal myKey = 1\nfor key, value in pairs(binarySwitches) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == binarySwitch then\n    fibaro:debug(binarySwitch)\n    if key < #binarySwitches then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #binarySwitches\n  end\nend\n\n-- actualizar la etiqueta de actuador\nfibaro:call(_selfId, \"setProperty\", \"ui.actuatorLabel.value\",\n binarySwitches[myKey].id..'-'..binarySwitches[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(_selfId)\n--actualizar dispositivo\ntermostatoVirtual.actuatorId = binarySwitches[myKey].id\nfibaro:setGlobal('dev'.._selfId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":16,"lua":true,"waitForResponse":false,"caption":"游댖","name":"PIDButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tPIDButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[resetDevice(nodeId)\n    (number) nodeId: n칰mero del dispositivo a almacenar en la variable global\ncrea una varaible global para almacenar la tabla que representa el\ndispositivo y lo inicializa. --]]\nfunction resetDevice(nodeId)\n  -- si no exite la variable global\n  if not isVariable('dev'..nodeId) then\n    -- intentar crear la variableGlobal\n    local json = '{\"name\":\"'..'dev'..nodeId..'\", \"isEnum\":0}'\n    if not HC2 then HC2 = Net.FHttp(\"127.0.0.1\", 11111) end\n    HC2:POST(\"/api/globalVariables\", json)\n    fibaro:sleep(1000)\n    -- comprobar que se ha creado la variableGlobal\n    if not isVariable('dev'..nodeId) then\n      toolKit:log(DEBUG, 'No se pudo declarar variable global '..'dev'..nodeId)\n      fibaro:abort()\n    end\n  end\n  -- crear tabla vac칤a para dispositivo\n  local termostatoVirtual = {nodeId = nodeId, panelId = 0, probeId = 0,\n  targetLevel = 0, value = 0, mode = 1, timestamp = os.time()}\n  -- guardar la tabla en la variable global\n  fibaro:setGlobal('dev'..nodeId, json.encode(termostatoVirtual))\n  return termostatoVirtual\nend\n\n--[[refreshLoook(termostatoVirtual)\n  (table) termostatoVirtual: tabla que representa el termostato virtual\n  actualiza los componentes visiales seg칰n el estado de la tabla--]]\nfunction refreshLoook(termostatoVirtual)\n  -- temperaturas\n  fibaro:call(_selfId, \"setProperty\", \"ui.actualConsigna.value\",\n   '00.00췈C / 00.00췈C _')\n  -- tiempo\n  fibaro:call(_selfId, \"setProperty\", \"ui.timeLabel.value\", '00h 00m')\n  -- estado\n  fibaro:call(_selfId, \"setProperty\", \"ui.modeLabel.value\", '')\n  -- sonda\n  fibaro:call(_selfId, \"setProperty\", \"ui.probeLabel.value\", '0-游댢')\n  -- actuador\n  fibaro:call(_selfId, \"setProperty\", \"ui.actuatorLabel.value\", '0-游댢')\nend\n\nlocal termostatoVirtual = resetDevice(_selfId)\nrefreshLoook(termostatoVirtual)\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":17,"lua":false,"waitForResponse":false,"caption":"id:","name":"labelId","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}