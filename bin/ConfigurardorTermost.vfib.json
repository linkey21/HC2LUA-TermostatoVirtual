{"name":"ConfigurardorTermost","type":"virtual_device","properties":{"deviceIcon":1068,"currentIcon":"1068","log":"","logTemp":"","mainLoop":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tconfigMainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nif not thermostatId then thermostatId = 631 end\nif not iconId then iconId = 1068 end\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- ID de este dispositivo virtual\nif not _selfId then _selfId = fibaro:getSelfId() end\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- actualizar etiqueta identificador\nfibaro:call(_selfId, \"setProperty\", \"ui.idLabel.value\", 'Termostato: '\n ..thermostatId..' Panel Config.:'.._selfId)\n -- actualizar icono\n fibaro:call(_selfId, 'setProperty', \"currentIcon\", iconId)\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\nif not K.cyclesH then K.cyclesH = 3 end\n-- actualizar etiquetas K\n--fibaro:debug('Kp='..K.kP..' Ki='..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\",\n 'histeresis='..K.histeresis..' antiwindupReset='..K.antiwindupReset)\n","ui.KLabel.value":"Kp=250 Ki=40 Kd=35 c/h=6","ui.actuatorLabel.value":"414-Lamparita","ui.hisWindLabel.value":"histeresis=0 antiwindupReset=0.3","ui.idLabel.value":"Termostato: 631 Panel Config.:630","ui.probeLabel.value":"0-Sonda Virtual","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"","name":"KLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"- kp","name":"downKpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor\nif K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":3,"lua":true,"waitForResponse":false,"caption":"+ kp","name":"upKpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\nif K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":4,"lua":true,"waitForResponse":false,"caption":"- ki","name":"downKiButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\nif K.kI > 0 then K.kI = K.kI -1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":5,"lua":true,"waitForResponse":false,"caption":"+ ki","name":"upKiButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI -1 else K.kI = 99 end\n-- incrementar valor kI\nif K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"- kd","name":"downKdButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\nif K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":7,"lua":true,"waitForResponse":false,"caption":"+ kd","name":"upKdButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\nif K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":8,"lua":false,"waitForResponse":false,"caption":"","name":"button_2_1","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"cicl/H","name":"cycleButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tcycleButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- obtener etiqueta actual\nlocal kLabel = fibaro:get(fibaro:getSelfId(), 'ui.KLabel.value')\nlocal actualCycle = tonumber(string.sub(kLabel, string.find(kLabel, 'c/h=')+ 4))\nkLabel = string.sub(kLabel, 1, string.find(kLabel, 'c/h=') + 3)\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.idLabel.value')\nfibaro:debug(idLabel)\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\nfibaro:debug(thermostatId)\n-- aumentar ciclo\nif actualCycle < 12 then\n  actualCycle = actualCycle * 2\nelse\n  actualCycle = 3\nend\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\nK.cyclesH = actualCycle\n-- actualizar dispositivo\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n-- actualizar etiqueta K\nfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.KLabel.value\",\n kLabel..actualCycle)\n --\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":10,"lua":false,"waitForResponse":false,"caption":"","name":"hisWindLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":11,"lua":true,"waitForResponse":false,"caption":"- His","name":"downHisButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\nif K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend\n-- incrementar valor histeresis\n--if K.histeresis < 1 then\n--  K.histeresis = K.histeresis + .1\n--else K.histeresis = 0\n--end\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'histeresis='\n ..K.histeresis..' antiwindupReset='..K.antiwindupReset)\n","buttonIcon":0,"favourite":false,"main":false},{"id":12,"lua":true,"waitForResponse":false,"caption":"+ His","name":"upHisButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n-- incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'histeresis='\n ..K.histeresis..' antiwindupReset='..K.antiwindupReset)\n","buttonIcon":0,"favourite":false,"main":false},{"id":13,"lua":true,"waitForResponse":false,"caption":"- wUp","name":"downwUpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n-- decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend\n--[[incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend]]\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'histeresis='\n ..K.histeresis..' antiwindupReset='..K.antiwindupReset)\n","buttonIcon":0,"favourite":false,"main":false},{"id":14,"lua":true,"waitForResponse":false,"caption":"+ wUp","name":"upwUpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.K\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n--[[decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend]]\n--incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.K = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'histeresis='\n ..K.histeresis..' antiwindupReset='..K.antiwindupReset)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":15,"lua":false,"waitForResponse":false,"caption":"Sonda","name":"probeLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":16,"lua":false,"waitForResponse":false,"caption":"Actuador","name":"actuatorLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":17,"lua":true,"waitForResponse":false,"caption":"Sonda","name":"probeButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tprobeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores de temperatura\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal temperatureSensors = {}\nfor key, value in pairs(devices) do\n  -- para la habitaciÃ³n fibaro:getRoomID(_selfId)\n  -- todos los \"type\":\"com.fibaro.temperatureSensor\",\n  if value[\"type\"] == \"com.fibaro.temperatureSensor\" then\n    local temperatureSensor = {id = value.id, name = value.name}\n    table.insert(temperatureSensors, temperatureSensor)\n  end\nend\n-- aÃ±adir sonda virtual\nlocal temperatureSensor = {id = 0, name = 'Sonda Virtual'}\ntable.insert(temperatureSensors, temperatureSensor)\n\n-- seleccionar el siguiete sensor que corresponda\ntemperatureSensor = fibaro:get(_selfId, 'ui.probeLabel.value')\nlocal myKey = 1\nfor key, value in pairs(temperatureSensors) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == temperatureSensor then\n    fibaro:debug(temperatureSensor)\n    if key < #temperatureSensors then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #temperatureSensors\n  end\nend\n\n-- actualizar la etiqueta de sonda\nfibaro:call(_selfId, \"setProperty\", \"ui.probeLabel.value\",\n temperatureSensors[myKey].id..'-'..temperatureSensors[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n--actualizar dispositivo\ntermostatoVirtual.probeId = temperatureSensors[myKey].id\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":true},{"id":18,"lua":true,"waitForResponse":false,"caption":"Actuador","name":"actuatorButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tactuatorButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores interruptores / actuadores\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal binarySwitches = {}\ntable.insert(binarySwitches, {id = 0, name = 'ð§'})\nfor key, value in pairs(devices) do\n  -- para la habitaciÃ³n fibaro:getRoomID(_selfId)\n  -- todos los \"type\":\"com.fibaro.binarySwitch\",\n  if value[\"type\"] == \"com.fibaro.binarySwitch\" or\n     value[\"type\"] == \"com.fibaro.operatingModeHorstmann\" then\n    local binarySwitch = {id = value.id, name = value.name}\n    table.insert(binarySwitches, binarySwitch)\n  end\nend\n\n-- seleccionar el siguiete sensor que corresponda\nbinarySwitch = fibaro:get(_selfId, 'ui.actuatorLabel.value')\nlocal myKey = 1\nfor key, value in pairs(binarySwitches) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == binarySwitch then\n    fibaro:debug(binarySwitch)\n    if key < #binarySwitches then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #binarySwitches\n  end\nend\n\n-- actualizar la etiqueta de actuador\nfibaro:call(_selfId, \"setProperty\", \"ui.actuatorLabel.value\",\n binarySwitches[myKey].id..'-'..binarySwitches[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n--actualizar dispositivo\ntermostatoVirtual.actuatorId = binarySwitches[myKey].id\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":19,"lua":false,"waitForResponse":false,"caption":"","name":"button_7_1","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":20,"lua":false,"waitForResponse":false,"caption":" Aâ","name":"Button21","empty":false,"msg":"Secuencia para enviar","buttonIcon":0,"favourite":false,"main":false},{"id":21,"lua":true,"waitForResponse":false,"caption":"Eð","name":"statusButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tstatusButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n-- thingspeakKey Key para registro y grÃ¡ficas de temperatura\nlocal thingspeakKey = 'CQCLQRAU070GEOYY'\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId =  tonumber(string.sub(idLabel, 13, p2))\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n\n-- actualizar cuando se anota salida del PID.\n--if termostatoVirtual.PID and termostatoVirtual.PID['timestamp'] ~= timestampPID then\n  local PID = termostatoVirtual.PID\n  -- analizar resultado\n  fibaro:debug('E='..PID.newErr..', P='..PID.proporcional..', I='..\n   PID.integral..', D='..PID.derivativo..', S='..PID.result)\n  --timestampPID = termostatoVirtual.PID['timestamp']\n  if not thingspeak then\n    thingspeak = Net.FHttp(\"api.thingspeak.com\")\n  end\n  local payload = \"key=\"..thingspeakKey..\"&field1=\"..PID.newErr..\n  \"&field2=\"..PID.proporcional..\"&field3=\"..PID.integral..\n  \"&field4=\"..PID.derivativo..\"&field5=\"..PID.result..\n  \"&field6=\"..termostatoVirtual.targetLevel..\"&field7=\"..termostatoVirtual.value\n  local response, status, errorCode = thingspeak:POST('/update', payload)\n--end\n","buttonIcon":0,"favourite":false,"main":false},{"id":22,"lua":true,"waitForResponse":false,"caption":"Cð§","name":"autoTtuneButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tautoTuneButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\nlocal tuneTime = 7200    -- segundos que dura la pruena de calentamiento\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.idLabel.value')\nlocal p2 = string.find(idLabel, ' Panel')\nlocal thermostatId = tonumber(string.sub(idLabel, 13, p2))\nlocal mode = {}; mode[0]='OFF'; mode[1]='AUTO'; mode[2]='MANUAL'\nmode[3]='CALIBRADO_F1'; mode[4]='CALIBRADO_F2'; mode[5]='CALIBRADO_FIN'\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n--[[CALIBRADO\ncomenzamos el calibrado tomando la temperatura (t) ponemos la salida =\n (cycleTime - minTimeActiondurante) durante el tiempo indicado (tuneTime)\n cuando pasa el tiempo tomamos la temperatura para hayar el incremento de\n producido desde (t) a (th). [ih = th - t]\nuna vez se alcanzado el tiempo, poner salida = 0 comprobar la temperatura (th)\nhasta que comience a bajar (thh) o hasta que pase tuneTime/2 para averiguar la\ninercia tÃ©rmica [iT = thh - th]\n\nkP = cycleTime / (ih)\nkI = cycleTime / (ih * 15)\nKD = K.kI * 2\nhisteresis = thh - th\nantiwindupReset = histeresis + (cycleTime / 2000)\n]]\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n-- si no estÃ¡ calibrando previamente comenzar el calibrado\nif termostatoVirtual.mode < 3 then\n  fibaro:debug('Comienza calibrado Fase 1...')\n  -- poner el PID en modo autoTune Fase 1 e indicar tiempo de calibrado\n  local K = termostatoVirtual.K\n  termostatoVirtual['K'].tuneTime = tuneTime; termostatoVirtual.mode = 3\n  -- actualizar dispositivo\n  fibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n  -- inicializar temperatura inicial y temperatura tras tiempo de calibrado\n  local t = termostatoVirtual.value; local th = t\n  -- inicializar variable de instante de fin de calibrado\n  tuneStamp = os.time() + tuneTime\n  -- medir teperatura mientras transcurre el periodo de calibrado fase 1\n  fibaro:debug('t = '..th)\n  while os.time() <= tuneStamp do\n    -- recuperar dispositivo\n    termostatoVirtual = getDevice(thermostatId)\n    th = termostatoVirtual.value\n  end\n\n  fibaro:debug('Comienza calibrado Fase 2...')\n  -- poner el PID en modo autoTune Fase 2\n  termostatoVirtual.mode = 4\n  -- actualizar dispositivo\n  fibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n  -- inicializar temperatura de inercia\n  local thh = th\n  -- mientras la temperatura de la sonda no descienda tomar temperatura de\n  -- inercia como mÃ¡ximo durante la mitad del tiempo de calibrado\n  tuneStamp = os.time() + (tuneTime / 2)\n  while termostatoVirtual.value >= th and os.time() <= tuneStamp do\n    thh = termostatoVirtual.value\n    -- recuperar dispositivo\n    termostatoVirtual = getDevice(thermostatId)\n  end\n  fibaro:debug('thh = '..thh)\n\n  K.histeresis = thh - th\n  K.antiwindupReset = K.histeresis + ((3600/K.cyclesH) / 2000)\n  fibaro:debug('histeresis='..K.histeresis..' antiwindupReset='\n  ..K.antiwindupReset )\n  local ih = thh - t\n  -- evitar error division por 0\n  if ih == 0 then ih = 1 end\n  fibaro:debug('th = '..th)\n  K.kP = math.floor((3600/K.cyclesH) / ih)\n  K.kI = math.floor((3600/K.cyclesH) / (ih * 15))\n  K.kD = K.kI * 2\n  fibaro:debug('kP='..K.kP..' kI='..K.kI..' kD='..K.kD)\n\n  -- guardar resultado\n  termostatoVirtual.K = K\nend\n\nfibaro:debug('Finalizo calibrado')\n-- indicar anulada o finalizado del calibrado\ntermostatoVirtual.mode = 5\n\n-- actualizar dispositivo\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n","buttonIcon":0,"favourite":false,"main":false},{"id":23,"lua":false,"waitForResponse":false,"caption":"Rð","name":"Button24","empty":false,"msg":"Secuencia para enviar","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":24,"lua":false,"waitForResponse":false,"caption":"","name":"idLabel","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}