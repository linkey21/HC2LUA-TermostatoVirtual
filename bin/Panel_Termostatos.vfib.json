{"name":"Panel_Termostatos","type":"virtual_device","properties":{"deviceIcon":1068,"currentIcon":"1068","log":"","logTemp":"","mainLoop":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tconfigMainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nif not iconId then iconId = 1068 end\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal release = {name='configurardorTermost', ver=2, mayor=0, minor=0}\n-- ID de este dispositivo virtual\nif not _selfId then _selfId = fibaro:getSelfId() end\n\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n--[[--------- BUCLE PRINCIPAL ------------------------------------------------]]\nwhile true do\n  -- obtener id del termostato\n  local idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\n  local p2 = string.find(idLabel, '-')\n  while not p2 do\n    fibaro:debug(release['name']..' esperando selecciÃ³n de termostato')\n    idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\n    p2 = string.find(idLabel, '-')\n    fibaro:sleep(1000)\n  end\n  local thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n\n  -- actualizar etiqueta identificador\n  fibaro:call(_selfId, \"setProperty\", \"ui.idLabel.value\", 'id: '.._selfId)\n\n   -- actualizar icono\n   fibaro:call(_selfId, 'setProperty', \"currentIcon\", iconId)\n\n  -- recuperar dispositivo\n  local termostatoVirtual = getDevice(thermostatId)\n  local PID = termostatoVirtual.PID\n  if not PID.cyclesH then PID.cyclesH = 3 end\n\n  -- actualizar etiquetas K\n  fibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..PID.kP..' Ki='\n   ..PID.kI..' Kd='..PID.kD..' c/h='..PID.cyclesH)\n   fibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n    ..PID.histeresis..' wUp='..PID.antiwindupReset..' mTa='..PID.minTimeAction\n    ..' sTa='..PID.secureTimeAction)\n\n   -- actualizar la etiqueta de sonda\n   local probeName\n   if termostatoVirtual.probeId == 0 then\n     probeName = 'Sonda Virtual'\n   else\n     probeName = fibaro:getName(termostatoVirtual.probeId)\n   end\n   fibaro:call(_selfId, \"setProperty\", \"ui.probeLabel.value\",\n   termostatoVirtual.probeId..'-'..probeName)\n\n   -- actualizar la etiqueta de actuador\n   local actuatorName\n   if termostatoVirtual['actuator'].id == 0 then\n     actuatorName ='ðŸ”§'\n   else\n     actuatorName = fibaro:getName(termostatoVirtual['actuator'].id)\n   end\n   fibaro:call(_selfId, \"setProperty\", \"ui.actuatorLabel.value\",\n    termostatoVirtual['actuator'].id..'-'..actuatorName)\n\n   -- actualizar etiqueta de modo del Actuador\n   if termostatoVirtual['actuator'].maintenance then\n     fibaro:call(_selfId, \"setProperty\", \"ui.statusLabel.value\", 'ðŸ”§MANTEN')\n   else\n     fibaro:call(_selfId, \"setProperty\", \"ui.statusLabel.value\", 'âš™ RUNNING')\n   end\n\n   -- esperar para evitar colapsar la CPU\n   fibaro:sleep(1000)\n   -- para control por watchdog\n   fibaro:debug(release['name']..' OK')\nend\n","ui.KLabel.value":"Kp=258 Ki=50 Kd=30 c/h=6","ui.actuatorLabel.value":"595-Caldera","ui.hisWindLabel.value":"his=0.25 wUp=1 mTa=30 sTa=15","ui.idLabel.value":"id: 642","ui.probeLabel.value":"0-Sonda Virtual","ui.statusLabel.value":"âš™ RUNNING","ui.terostatLabel.value":"641-TermostatoGas","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Termost.","name":"terostatLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Sonda","name":"probeLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Actuador","name":"actuatorLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":4,"lua":true,"waitForResponse":false,"caption":"Term ðŸ“Ÿ","name":"termostatButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\ttermostatButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores interruptores / actuadores\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal virtualDevices = {}\n--table.insert(virtualDevices, {id = 0, name = 'ðŸ”§'})\nfor key, value in pairs(devices) do\n  -- para la habitaciÃ³n fibaro:getRoomID(_selfId)\n  -- todos los \"baseType\":\"com.fibaro.virtualDevices\",\n  if value[\"type\"] == \"virtual_device\" and\n  string.find(value[\"properties\"].mainLoop, \"termostat.linkey.es\") then\n    local virtualDevice = {id = value.id, name = value.name}\n    table.insert(virtualDevices, virtualDevice)\n  end\nend\n\n-- seleccionar el siguiete sensor que corresponda\nlocal device = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal myKey = 1\nfor key, value in pairs(virtualDevices) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == device then\n    fibaro:debug(device)\n    if key < #virtualDevices then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #virtualDevices\n  end\nend\n\n-- actualizar la etiqueta de actuador\nfibaro:call(_selfId, \"setProperty\", \"ui.terostatLabel.value\",\n virtualDevices[myKey].id..'-'..virtualDevices[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(virtualDevices[myKey].id)\n-- si se ha seleccionado un termostatoVirtual\nif termostatoVirtual then\n  --actualizar dispositivo\n  termostatoVirtual.nodeId = virtualDevices[myKey].id\n  fibaro:setGlobal('dev'..virtualDevices[myKey].id,\n  json.encode(termostatoVirtual))\nend\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":true},{"id":5,"lua":true,"waitForResponse":false,"caption":"SondaðŸŒ¡","name":"probeButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tprobeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n-- obtener id del termostato\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[----------------------------------------------------------------------------\nisVariable(varName)\n\tcomprueba si existe una variable global dada(varName)\n--]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n-- obtener sensores de temperatura\nresponse ,status, errorCode = HC2:GET(\"/api/devices\")\nlocal devices = json.decode(response)\nlocal temperatureSensors = {}\nfor key, value in pairs(devices) do\n  -- para la habitaciÃ³n fibaro:getRoomID(_selfId)\n  -- todos los \"type\":\"com.fibaro.temperatureSensor\",\n  if value[\"type\"] == \"com.fibaro.temperatureSensor\" then\n    local temperatureSensor = {id = value.id, name = value.name}\n    table.insert(temperatureSensors, temperatureSensor)\n  end\nend\n-- aÃ±adir sonda virtual\nlocal temperatureSensor = {id = 0, name = 'Sonda Virtual'}\ntable.insert(temperatureSensors, temperatureSensor)\n\n-- seleccionar el siguiete sensor que corresponda\ntemperatureSensor = fibaro:get(_selfId, 'ui.probeLabel.value')\nlocal myKey = 1\nfor key, value in pairs(temperatureSensors) do\n  fibaro:debug(value.name..' '..key..' '..myKey)\n  if value.id..'-'..value.name == temperatureSensor then\n    fibaro:debug(temperatureSensor)\n    if key < #temperatureSensors then myKey = key + 1 else myKey = 1 end\n    break\n  else\n    myKey = #temperatureSensors\n  end\nend\n\n-- actualizar la etiqueta de sonda\nfibaro:call(_selfId, \"setProperty\", \"ui.probeLabel.value\",\n temperatureSensors[myKey].id..'-'..temperatureSensors[myKey].name)\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n--actualizar dispositivo\ntermostatoVirtual.probeId = temperatureSensors[myKey].id\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n--[[--------------------------------------------------------------------------]]\n","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"Actuad ðŸ”¥","name":"actuatorButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tactuatorButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n\n-- si el actuador estÃ¡ en modo running no se permite cambiar la configuraciÃ³n\nif termostatoVirtual['actuator'].maintenance then\n  -- obtener conexiÃ³n con el controlador\n  if not HC2 then\n    HC2 = Net.FHttp(\"127.0.0.1\", 11111)\n  end\n\n  -- obtener sensores interruptores / actuadores\n  response ,status, errorCode = HC2:GET(\"/api/devices\")\n  local devices = json.decode(response)\n  local binarySwitches = {}\n  table.insert(binarySwitches, {id = 0, name = 'ðŸ”§'})\n  for key, value in pairs(devices) do\n    -- todos los \"baseType\":\"com.fibaro.binarySwitch\" o \"com.fibaro.operatingMode\"\n    if value[\"type\"] == \"com.fibaro.binarySwitch\" then\n      local binarySwitch = {id = value.id, name = value.name,\n      onFunction = 'turnOn', offFunction = 'turnOff', statusPropertie = 'value'}\n      table.insert(binarySwitches, binarySwitch)\n    elseif value[\"baseType\"] == \"com.fibaro.operatingMode\" then\n      local binarySwitch = {id = value.id, name = value.name,\n      onFunction = 'setMode', offFunction = 'setMode', statusPropertie = 'mode'}\n      table.insert(binarySwitches, binarySwitch)\n    end\n  end\n\n  -- seleccionar el siguiete sensor que corresponda\n  binarySwitch = fibaro:get(_selfId, 'ui.actuatorLabel.value')\n  local myKey = 1\n  for key, value in pairs(binarySwitches) do\n    fibaro:debug(value.name..' '..key..' '..myKey)\n    if value.id..'-'..value.name == binarySwitch then\n      fibaro:debug(binarySwitch)\n      if key < #binarySwitches then myKey = key + 1 else myKey = 1 end\n      break\n    else\n      myKey = #binarySwitches\n    end\n  end\n\n  --actualizar dispositivo\n  termostatoVirtual.actuator = {id = binarySwitches[myKey].id,\n   onFunction = binarySwitches[myKey].onFunction,\n   offFunction = binarySwitches[myKey].offFunction,\n   statusPropertie = binarySwitches[myKey].statusPropertie,\n   maintenance = termostatoVirtual['actuator'].maintenance}\n  fibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n  -- actualizar la etiqueta de actuador\n  fibaro:call(_selfId, \"setProperty\", \"ui.actuatorLabel.value\",\n   binarySwitches[myKey].id..'-'..binarySwitches[myKey].name)\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"","name":"statusLabel","favourite":false,"main":false}]},{"type":"label","elements":[{"id":8,"lua":false,"waitForResponse":false,"caption":"","name":"KLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":9,"lua":true,"waitForResponse":false,"caption":"- kp","name":"downKpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor\nif K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"+ kp","name":"upKpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\nif K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":11,"lua":true,"waitForResponse":false,"caption":"- ki","name":"downKiButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\nif K.kI > 0 then K.kI = K.kI -1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":12,"lua":true,"waitForResponse":false,"caption":"+ ki","name":"upKiButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI -1 else K.kI = 99 end\n-- incrementar valor kI\nif K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":13,"lua":true,"waitForResponse":false,"caption":"- kd","name":"downKdButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\nif K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":14,"lua":true,"waitForResponse":false,"caption":"+ kd","name":"upKdButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\nif K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)\n","buttonIcon":0,"favourite":false,"main":false},{"id":15,"lua":false,"waitForResponse":false,"caption":"","name":"button_7_1","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":16,"lua":true,"waitForResponse":false,"caption":"cicl/H","name":"cycleButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tcycleButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- obtener etiqueta actual\nlocal kLabel = fibaro:get(fibaro:getSelfId(), 'ui.KLabel.value')\nlocal actualCycle = tonumber(string.sub(kLabel, string.find(kLabel, 'c/h=')+ 4))\nkLabel = string.sub(kLabel, 1, string.find(kLabel, 'c/h=') + 3)\n-- obtener id del termostato\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\nfibaro:debug(thermostatId)\n-- aumentar ciclo\nif actualCycle < 12 then\n  actualCycle = actualCycle + 3\nelse\n  actualCycle = 3\nend\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal PID = termostatoVirtual.PID\nPID.cyclesH = actualCycle\n-- actualizar dispositivo\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n-- actualizar etiqueta K\nfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.KLabel.value\",\n kLabel..actualCycle)\n --\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":17,"lua":false,"waitForResponse":false,"caption":"","name":"hisWindLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":18,"lua":true,"waitForResponse":false,"caption":"- His","name":"downHisButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\nif K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend\n-- incrementar valor histeresis\n--if K.histeresis < 1 then\n--  K.histeresis = K.histeresis + .1\n--else K.histeresis = 0\n--end\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false},{"id":19,"lua":true,"waitForResponse":false,"caption":"+ His","name":"upHisButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n-- incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false},{"id":20,"lua":true,"waitForResponse":false,"caption":"- wUp","name":"downwUpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n-- decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend\n--[[incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend]]\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false},{"id":21,"lua":true,"waitForResponse":false,"caption":"+ wUp","name":"upwUpButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n--[[decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend]]\n--incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":22,"lua":true,"waitForResponse":false,"caption":"- mTa","name":"downMTaButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n--[[decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend\n--incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend]]\n\n-- decrementar valor minTimeAction\nif K.minTimeAction > 0 then\n  K.minTimeAction = K.minTimeAction - 1\nelse K.minTimeAction = 60\nend\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false},{"id":23,"lua":true,"waitForResponse":false,"caption":"+ mTa","name":"upMTaButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tdownKpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal K = termostatoVirtual.PID\n\n-- decrementar valor kP\n--if K.kP > 0 then K.kP = K.kP - 1 else K.kP = 999 end\n-- incrementar valor kI\n--if K.kP < 999 then K.kP = K.kP + 1 else K.kP = 0 end\n-- decrementar valor kI\n--if K.kI > 0 then K.kI = K.kI - 1 else K.kI = 99 end\n-- incrementar valor kI\n--if K.kI < 99 then K.kI = K.kI + 1 else K.kI = 0 end\n-- decrementar valor kD\n--if K.kD > 0 then K.kD = K.kD - 1 else K.kD = 99 end\n-- incrementar valor kD\n--if K.kD < 99 then K.kD = K.kD + 1 else K.kD = 0 end\n-- decrementar valor histeresis\n--[[if K.histeresis > 0 then\n  K.histeresis = K.histeresis - .01\nelse K.histeresis = 1\nend]]\n--[[incrementar valor histeresis\nif K.histeresis < 1 then\n  K.histeresis = K.histeresis + .01\nelse K.histeresis = 0\nend]]\n--[[decrementar valor antiwindupReset\nif K.antiwindupReset > 0 then\n  K.antiwindupReset = K.antiwindupReset - .01\nelse K.antiwindupReset = 1\nend\n--incrementar valor antiwindupReset\nif K.antiwindupReset < 1 then\n  K.antiwindupReset = K.antiwindupReset + .01\nelse K.antiwindupReset = 0\nend \n-- decrementar valor minTimeAction\nif K.minTimeAction > 0 then\n  K.minTimeAction = K.minTimeAction - 1\nelse K.minTimeAction = 60\nend--]]\n\n-- incrementar valor minTimeAction\nif K.minTimeAction < 60 then\n  K.minTimeAction = K.minTimeAction + 1\nelse K.minTimeAction = 0\nend\n\n--actualizar dispositivo\ntermostatoVirtual.PID = K\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n--[[ actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.KLabel.value\", 'Kp='..K.kP..' Ki='\n ..K.kI..' Kd='..K.kD..' c/h='..K.cyclesH)]]\nfibaro:call(_selfId, \"setProperty\", \"ui.hisWindLabel.value\", 'his='\n ..K.histeresis..' wUp='..K.antiwindupReset..' mTa='..K.minTimeAction\n ..' sTa='..K.secureTimeAction)\n","buttonIcon":0,"favourite":false,"main":false},{"id":24,"lua":false,"waitForResponse":false,"caption":"","name":"button_10_1","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":25,"lua":true,"waitForResponse":false,"caption":" sTa","name":"secTimeActButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tsecTimeActButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: nÃºmero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    device = json.decode(device)\n    -- si esta iniciado devolver el dispositivo\n    if device.nodeId then\n      return device\n     end\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- obtener etiqueta actual\nlocal kLabel = fibaro:get(fibaro:getSelfId(), 'ui.hisWindLabel.value')\nlocal actualTime = tonumber(string.sub(kLabel, string.find(kLabel, 'sTa=')+ 4))\nkLabel = string.sub(kLabel, 1, string.find(kLabel, 'sTa=') + 3)\n-- obtener id del termostato\nlocal idLabel = fibaro:get(fibaro:getSelfId(), 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\nfibaro:debug(thermostatId)\n-- rotar tiempo\nif actualTime < 60 then\n  actualTime = actualTime + 15\nelse\n  actualTime = 15\nend\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\nlocal PID = termostatoVirtual.PID\nPID.secureTimeAction = actualTime\n-- actualizar dispositivo\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n-- actualizar etiqueta K\nfibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.hisWindLabel.value\",\n kLabel..actualTime)\n --\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"button","elements":[{"id":26,"lua":false,"waitForResponse":false,"caption":"","name":"button_11_3","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":27,"lua":false,"waitForResponse":false,"caption":"","name":"button_11_0","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":28,"lua":true,"waitForResponse":false,"caption":"ðŸ”§/ âš™","name":"mantenButton","empty":false,"msg":"--[[ TermostatoVirtual\n\tDispositivo virtual\n\tstatusButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n-- obtener id del termostato\nlocal idLabel = fibaro:get(_selfId, 'ui.terostatLabel.value')\nlocal p2 = string.find(idLabel, '-')\nlocal thermostatId = tonumber(string.sub(idLabel, 1, p2 - 1))\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n-- isVariable(varName)\n-- (string) varName: nombre de la variable global\n-- comprueba si existe una variable global dada\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[----------------------------------------------------------------------------\ngetDevice(nodeId)\n\trecupera el dispositivo virtual desde la variable global\n  (number)\n--]]\nfunction getDevice(nodeId)\n  -- si  exite la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device then\n    return json.decode(device)\n  end\nend\n\n-- recuperar dispositivo\nlocal termostatoVirtual = getDevice(thermostatId)\n\n-- cambiar valor de mantenimiento\nlocal myLabel = ' ðŸ”§MANTEN'\nif termostatoVirtual['actuator'].maintenance then\n  termostatoVirtual['actuator'].maintenance = false\n  -- actualizar etiqueta\n  myLabel = ' âš™ RUNNING'\nelse\n  termostatoVirtual['actuator'].maintenance = true\nend\n\n--actualizar dispositivo\nfibaro:setGlobal('dev'..thermostatId, json.encode(termostatoVirtual))\n\n-- actualizar etiqueta\nfibaro:call(_selfId, \"setProperty\", \"ui.statusLabel.value\", myLabel)\n\nfibaro:debug(myLabel)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":29,"lua":false,"waitForResponse":false,"caption":"","name":"idLabel","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}